{% set ossec_server_config = salt['pillar.get']('ossec_server_config') %}
<!--
  Wazuh - Manager - Default configuration
  More info at: https://documentation.wazuh.com
  Mailing list: https://groups.google.com/forum/#!forum/wazuh
-->

<ossec_config>
  <global>
     <jsonout_output>yes</jsonout_output>
    {% if ossec_server_config.email_notification is not defined or ossec_server_config.email_notification | lower == "yes" %}
    <email_notification>yes</email_notification>
{% for ossec_server_config in ossec_server_config.mail_to %}   
    <email_to>{{ ossec_server_config }}</email_to>
    {% endfor %}
    <smtp_server>{{ ossec_server_config.mail_smtp_server }}</smtp_server>
    <email_from>{{ ossec_server_config.mail_from }}</email_from>
    {% else %}
    <email_notification>no</email_notification>
    {% endif %}
    <email_maxperhour>12</email_maxperhour>
  </global>

  <remote>
    <connection>secure</connection>
    <port>1514</port>
    <protocol>{{ ossec_server_config.protocol }}</protocol>
    <queue_size>5000</queue_size>
  </remote>

  <ruleset>
    <!-- Default ruleset -->
    <decoder_dir>ruleset/decoders</decoder_dir>
    <rule_dir>ruleset/rules</rule_dir>
    <rule_exclude>0215-policy_rules.xml</rule_exclude>
    <list>etc/lists/audit-keys</list>

    <!-- User-defined ruleset -->
    <decoder_dir>etc/decoders</decoder_dir>
    <rule_dir>etc/rules</rule_dir>
  </ruleset>


  <syscheck>
    <!-- Frequency that syscheck is executed -- default every 20 hours -->
    <frequency>{{ ossec_server_config.frequency_check }}</frequency>

    <scan_on_start>yes</scan_on_start>

    <!-- Generate alert when new file detected -->
    <alert_new_files>yes</alert_new_files>

    <!-- Don't ignore files that change more than 3 times -->
    <auto_ignore>no</auto_ignore>

    <!-- Directories to check  (perform all possible verifications) -->
{% for directory in ossec_server_config.directories %}
   <directories check_all="{{ directory.check_all }}">{{ directory.dirs }}</directories>
{% endfor %}

    <!-- Files/directories to ignore -->
    {% for ignore_file in ossec_server_config.ignore_files %}
    <ignore>{{ ignore_file }}</ignore>
    {% endfor %}
  </syscheck>

  <rootcheck>
    <disabled>no</disabled>
    <check_unixaudit>yes</check_unixaudit>
    <check_files>yes</check_files>
    <check_trojans>yes</check_trojans>
    <check_dev>yes</check_dev>
    <check_sys>yes</check_sys>
    <check_pids>yes</check_pids>
    <check_ports>yes</check_ports>
    <check_if>yes</check_if>

    <!-- Frequency that rootcheck is executed - every 12 hours -->
    <frequency>43200</frequency>

    <rootkit_files>/var/ossec/etc/shared/rootkit_files.txt</rootkit_files>
    <rootkit_trojans>/var/ossec/etc/shared/rootkit_trojans.txt</rootkit_trojans>

    <system_audit>/var/ossec/etc/shared/system_audit_rcl.txt</system_audit>
    <system_audit>/var/ossec/etc/shared/system_audit_ssh.txt</system_audit>
    {% if grains['os'] == 'CentOS' and grains['osrelease_info'][0] == 7 %}
     <system_audit>/var/ossec/etc/shared/cis_rhel7_linux_rcl.txt</system_audit>
    {% elif grains['os'] == 'CentOS' and grains['osrelease_info'][0] == 6  %}
     <system_audit>/var/ossec/etc/shared/cis_rhel6_linux_rcl.txt</system_audit>
    {% elif grains['os'] == 'CentOS' and grains['osrelease_info'][0] == 5  %}
     <system_audit>/var/ossec/etc/shared/cis_rhel5_linux_rcl.txt</system_audit>
    {% elif grains['os'] == 'Ubuntu' or grains['os'] == 'Debian' %}
    <system_audit>/var/ossec/etc/shared/cis_debian_linux_rcl.txt</system_audit>
    {% endif %}
    <skip_nfs>yes</skip_nfs>
  </rootcheck>

    {% if grains['os'] == 'Ubuntu'  and grains['oscodename'] == 'xenial' %}
    <wodle name="open-scap">
      <timeout>1800</timeout>
      <interval>1d</interval>
      <scan-on-start>yes</scan-on-start>

      <content type="xccdf" path="ssg-ubuntu-1604-ds.xml">
        <profile>xccdf_org.ssgproject.content_profile_common</profile>
      </content>
    </wodle>
    {% elif grains['os'] == 'CentOS' %}
    <wodle name="open-scap">
      <timeout>1800</timeout>
      <interval>1d</interval>
      <scan-on-start>yes</scan-on-start>

      {% if grains['osrelease_info'][0] == 7 %}
      <content type="xccdf" path="ssg-centos-7-ds.xml">
      {% elif grains['osrelease_info'][0] == 6 %}
      <content type="xccdf" path="ssg-centos-6-ds.xml">
      {% endif %}
      <profile>xccdf_org.ssgproject.content_profile_pci-dss</profile>
        <profile>xccdf_org.ssgproject.content_profile_common</profile>
      </content>
    </wodle>
    {% elif grains['os'] == 'RedHat' %}
       <wodle name="open-scap">
      <timeout>1800</timeout>
      <interval>1d</interval>
      <scan-on-start>yes</scan-on-start>

      {% if grains['osrelease_info'][0] == 7 %}
      <content type="xccdf" path="ssg-rhel-7-ds.xml">
      {% elif grains['osrelease_info'][0] == 6 %}
      <content type="xccdf" path="ssg-rhel-7-ds.xml">
      {% endif %}
      <profile>xccdf_org.ssgproject.content_profile_pci-dss</profile>
        <profile>xccdf_org.ssgproject.content_profile_common</profile>
      </content>
    </wodle>
      <profile>xccdf_org.ssgproject.content_profile_pci-dss</profile>
        <profile>xccdf_org.ssgproject.content_profile_common</profile>
      </content>
    </wodle>
    {% endif %}

  <global>
{% for white_list in ossec_server_config.globals %}
    <white_list>{{ white_list }}</white_list>
{% endfor %}
  </global>

  <alerts>
    <log_alert_level>{{ ossec_server_config.log_level }}</log_alert_level>
    <email_alert_level>{{ ossec_server_config.email_level }}</email_alert_level>
  </alerts>

{% for command in ossec_server_config.commands %}
  <command>
    <name>{{ command.name }}</name>
    <executable>{{ command.executable }}</executable>
    <expect>{{ command.expect }}</expect>
    <timeout_allowed>{{ command.timeout_allowed }}</timeout_allowed>
  </command>
{% endfor %}

  <!-- Active Response Config -->
{% for response in ossec_server_config.active_responses %}
  <active-response>
    <command>{{ response.command }}</command>
    <location>{{ response.location }}</location>
    <level>{{ response.level }}</level>
    <timeout>{{ response.timeout }}</timeout>
  </active-response>
{% endfor %}


  <!-- Files to monitor (localfiles) -->
{% for localfile in ossec_server_config.localfiles_manager %}
  <localfile>
     <log_format>{{ localfile.format }}</log_format>
     {% if localfile.location is defined %}<location>{{ localfile.location }}</location>{% endif %}
     {% if localfile.command is defined %}<command>{{ localfile.command }}</command>{% endif %}
     {% if localfile.frequency is defined %}<frequency>{{ localfile.frequency }}</frequency>{% endif %}
  </localfile>
{% endfor %}

{% if syslog_output is defined %}
{% for syslog_output in ossec_server_config.syslog_outputs %}
  <syslog_output>
    <server>{{ syslog_output.server }}</server>
    <port>{{ syslog_output.port }}</port>
    <format>{{ syslog_output.format }}</format>
  </syslog_output>
{% endfor %}
{% endif %}

</ossec_config>
